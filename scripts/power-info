#!/bin/env python3

# DEPENDENCIES: none

##################################################

# Use the argument --mode=name_of_the_mode to specify the mode you want to use.
# Specify no mode to see a list of available modes and their description.
# Alternatively, you can simply input the mode name as the first argument 

##################################################

# For ac_test mode:
# The file on your system keeping track of the power supply status.
ac_online_file = "/sys/class/power_supply/AC0/online"

# For battery_life mode:
# The file displaying the full energy stored by design by your battery.
energy_full_design_file = "/sys/class/power_supply/BAT0/energy_full_design"
# The file displaying the maximum energy your battery is currently able to store.
energy_full_now_file = "/sys/class/power_supply/BAT0/energy_full"

# How many polls should be done in one second (in ac_test mode)
frequency=100

##################################################

import os
from os import path
from time import sleep
from os import sys
from math import floor

modes_list = """available modes are:

    - ac_test       checks if the power supply is connected
    - health        gives a precentage representing how much power the
                    battery can store now compared to when it was new
"""

mode = ""
mode_argument_identifier = "--mode="

for arg in sys.argv[1:len(sys.argv)]:
    if mode_argument_identifier in arg:
        mode = arg[len(mode_argument_identifier):len(arg)]
        #break

if not "--" in sys.argv[len(sys.argv)-1]: mode = sys.argv[len(sys.argv)-1]

match mode:
    case "ac_test":
        def get_content(ac_state:int) -> str:
            width = os.get_terminal_size()[0]
            powered = ac_state > 0
            message = "  AC CONNECTED  " if powered else "  AC NOT CONNECTED  "
            half_point = (width-len(message))/2
            spacer_char = "█" if powered else "·"
            if len(message) >= width: return spacer_char*width

            left_spacer = spacer_char*int(half_point if floor(half_point) == half_point else floor(half_point))
            right_spacer = spacer_char*int(half_point if floor(half_point) == half_point else floor(half_point)+1)

            return left_spacer+message+right_spacer
    
        try:
            
            while True:
                with open(ac_online_file,"r") as content:
                    power = int(content.readline(1))
                    print(get_content(power))
                sleep(1/frequency)
        except KeyboardInterrupt:
            exit()
    case "health":
        with (
            open(energy_full_design_file, "r") as base,
            open("/sys/class/power_supply/BAT0/energy_full", "r") as relative
        ):
            #print(base.readline(8).strip())
            #print(relative.readline(8).strip())
            energy_max_design = int(base.readline(8).strip())
            energy_max_now = int(relative.readline(8).strip())
            print(f"battery integrity: {(energy_max_now/energy_max_design):.1%}")
    case _:
        print(f"\nMode \"{mode}\" unknown, {modes_list}")
